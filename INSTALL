Installing pyBioLCCC from PyPi
******************************

GNU/Linux
=========

The preferred way to obtain pyBioLCCC is via pip Python package manager.
Install pip and execute in the command line:

.. code-block:: bash

    sudo apt-get install python-setuptools
    sudo easy_install pip
    sudo pip install pyBioLCCC

Windows
=======

The easiest way to install pyBioLCCC on Windows is by using a precompiled .exe package is available for download from the pyBioLCCC page on
PyPi: http://pypi.python.org/pypi/pyBioLCCC/

If a precompiled package for your version of Python is not available,
you may compile it yourself. The ready-to-use Python distributions,
like ActivePython Community Edition or Enthought Python Distribution,
already contains all the required tools for package building. The
latter is free for academic usage. With these distributions, pyBioLCCC
can be installed via the standard routine:

.. code-block:: bash

    easy_install pip
    pip install pyBioLCCC

If you distribution lacks building tools, you may try to install them
yourself.

1) You will need to download and install MinGW compiler suite
(available at
http://sourceforge.net/projects/mingw/files/Automated%20MinGW%20Installer/mingw-get-inst/). Note
that a C++ compiler is not installed by default and should be checked
during the installation process.

2) Download and install setuptools package (http://pypi.python.org/pypi/setuptools).

3) Execute the following text in the command line:
         
.. code-block:: bash
   
    echo [build] > %HOMEPATH%\pydistutils.cfg
    echo compiler = mingw32 >> %HOMEPATH%\pydistutils.cfg
    c:\Python27\Scripts\easy_install.exe pip
    c:\Python27\Scripts\pip.exe install pyBioLCCC
 
Do not forget to change path to python distribution according to your
own directory structure.

Building libBioLCCC/pyBioLCCC from sources
******************************************

The source code is available online at http://hg.theorchromo.ru/libbiolccc.
You can download the archived source code or pull the mercurial repository:

.. code-block:: bash

    hg clone http://hg.theorchromo.ru/libbiolccc

GNU/Linux
=========

libBioLCCC
----------

In order to compile libBioLCCC you need the following tools to be installed:

* GNU C++ compiler
* Python 2.6 or 2.7 (other versions 2.x are accepted, but not tested)
* SCons build system
* (pyBioLCCC) python-dev package
* (pyBioLCCC) SWIG interface wrapper
* (documentation) Doxygen documentation system
* (documentation) Sphinx documentation system, version >= 1.0.0
* (documentation) DVIPNG converter
* (documentation) matplotlib Python library 
* (optional) Mercurial version control system

All these tools can be installed from the main repository of your
Linux distribution and/or via pip/easy_install packaging system of
Python. Under Ubuntu or Debian these dependencies can be satisfied
using the following command:

.. code-block:: bash

    sudo apt-get install build-essential python-dev scons swig \
                 doxygen python-sphinx python-matplotlib dvipng \
                 python-setuptools

As for Lucid v10.10, Ubuntu supplies an older version of
python-sphinx, which is not enough for libBioLCCC documentation. On
these systems, python-sphinx may be updated via pip python package
manager.

.. code-block:: bash

    sudo easy_install pip
    sudo pip install sphinx --upgrade

In order to build libBioLCCC, you need to download and extract the
source code. Then make a separate build directory, e.g. if the source
code is stored into ~/programming/libbiolccc/source than the build
directory can be ~/programming/libbiolccc/build. Finally, execute in
the build directory:

.. code-block:: bash
    
    scons -Y /path/to/source/directory all

The build scripts will do all the remaining work.

pyBioLCCC
---------

In order to compile and install the Python package:

* In the build directory, compile the target 'pyBioLCCC' using SCons
  build scripts.

  .. code-block:: bash

      scons -Y /path/to/source/directory pyBioLCCC

* After that, run setup.py:

  .. code-block:: bash

      python setup.py install

  or

  .. code-block:: bash

      python setup.py build

  In the latter case, the built library can be found in build/lib directory.


Windows
=======

The main platform of libBioLCCC/pyBioLCCC development is Linux.
However, we clearly understand importance of Windows and try to write 
only platform-independent code and to use only cross-platform tools.
In theory that means that it will make no difficulty to compile libBioLCCC
under Windows.

So far only the pyBioLCCC package was compiled for Windows using Wine+MinGW32.
The instructions are the following:

1. Install the latest Wine distribution. On Debian-based systems it is
   done via:

   .. code-block:: bash

      sudo apt-get install wine

2. Download and install the latest MinGW distribution UNDER Wine.

   .. code-block:: bash

        wget http://downloads.sourceforge.net/project/mingw/Automated%20MinGW%20Installer/mingw-get-inst/mingw-get-inst-20110211/mingw-get-inst-20110211.exe?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fmingw%2Ffiles%2FAutomated%2520MinGW%2520Installer%2Fmingw-get-inst%2Fmingw-get-inst-20110211%2F -P /tmp/ 
        wine /tmp/MinGW-5.1.6.exe

3. Compile the target 'pyBioLCCC' under Linux. This action will
   generate a C++ code with Python wrappings.

   .. code-block:: python

        scons -Y /path/to/source/directory pyBioLCCC

4. Using wine, mingw32 and setup.py build an installable pyBioLCCC Windows 
   package.

   .. code-block:: bash
       
       wine python setup.py build -c mingw32 bdist_wininst

5. If you plan to upload the pyBioLCCC-derived packages to PyPi, then:

   a. Set the HOME environment variable to C:\\users\\your_user", where 
      replace your_user by your login name in Linux.
      In order to set this variable print 'wine regedit' in console. Using 
      the regedit window navigate to HKEY_CURRENT_USER/Environment and 
      right-click on the right field choosing Add->String value.

   b. Create .pypirc in C:\\users\\your_user and fill it with the following
      text:

      .. code-block:: python

          [distutils]
          index-servers =
              pypi

          [pypi]
          username:<username>
          password:<password>

      There, <username> and <password> correspond to your account at PyPI.
